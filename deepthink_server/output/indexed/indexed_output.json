{
    "0": "본문 바로가기 analogcoding 카테고리 검색하기 검색하기 Search analogcoding be well 분류 전체보기 (176) Hobby (0) Treasure (0) Be well coding (122) CSE (1) In Pre (2) In Immersive (64) Learn more (41) Mine (14) Study JS for me (39) Array Method (4) Keyword (19) Algorithm (16) Mini Project (13) 포스기 만들기 (3) OwlPost (앱) (8) 개고수 (웹) (2) 짠 (앱) (0) Guestbook Notice Recent Posts react SEO , prerender React Hook life cycle React useRef 사용하기 react 에서 SVG 아이콘 컴포넌트로 사용하기⋯ Recent Comments ts에 대한 설정은 따로 안해주나요?",
    "1": "자바배울때 키오스크+주방KDS+홀DID 자바로 서버만들⋯ 어떻게 만들고 어떤앱에서 하나요?",
    "2": "const JWT = async (req, res, n⋯ Link « 2025/03 » 일 월 화 수 목 금 토 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Tags 개발 DOM 제일어려워 포스기 method 공부 자바스크립트 nqueens 해커톤 ftech 코드스테이츠 underbar grpahQL 일상 취업 Instantiation Patterns vscode array underscores JS react 코딩 연습 알고리즘 this JavaScript 초보 리액트 클라이언트 엔퀸즈 more Archives 2020/06 (3) 2020/05 (3) 2020/04 (8) 2020/03 (2) Today 6 Total 118,087 닫기 관리 메뉴 글쓰기 방명록 RSS 관리 analogcoding react 에서 loading 표시하기 (progressbar , spinner) 본문 Be well coding/Learn more react 에서 loading 표시하기 (progressbar , spinner) be well 2020.",
    "3": "1.",
    "4": "16.",
    "5": "16:01 파일을 업로드 하거나 다운로드 하는 상황에서 유저에게 해당 load status 를 보여주기 위한 기능을 구현하게 되었습니다.",
    "6": "텍스트가 아닌 데이터 크기가 큰 파일을 유저가 업로드 , 다운 받을 수 있는 상황일 때로 가정합니다.",
    "7": "요청에 대한 대기 시간을 indicator 로 표시해주는데 스피너와 로딩바 두 가지를 사용해서 구현해보겠습니다.",
    "8": "axios 요청과 Material UI 컴포넌트를 사용하겠습니다.",
    "9": "https://material-ui.com/api/circular-progress/ CircularProgress API - Material-UI The API documentation of the CircularProgress React component.",
    "10": "Learn more about the props and the CSS customization points.",
    "11": "material-ui.com 먼저 스피너를 구현해보겠습니다.",
    "12": "데이터를 받아오는 동안 보여줄 스피너입니다.",
    "13": "async fetchSomeData(url: string, fileType: string, fileName: string) { let response await this.setState({ loadingIndicator: true, }) response = await Axios.get(url, { responseType: \"blob\" }) await this.setState({ loadingIndicator: false, }) ... loadingIndicator 라는 state 를 false 로 선언하고 setState 를 이용해서 요청이 일어나는 함수가 실행되면 state 를 true 로 바꿔줍니다.",
    "14": "{this.state.loadingIndicator === true ? <CircularProgress className=\"spinner\" /> : null} 그리고 삼항연산자를 사용하여 spinner 컴포넌트를 렌더해줍니다.",
    "15": "이제 요청함수가 실행되고 요청이 끝날 때까지 화면에서 스피너를 확인할 수 있습니다.",
    "16": "다음은 업로드 상황에서 업로드 되는 로딩 상황을 보여줄 로딩 바를 구현해보겠습니다.",
    "17": "let response = await axios.get(url, { onDownloadProgress: (progressEvent) => { let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total); // axios 에 onDownloadProgress & onUploadProgress 를 사용하면 // 해당 데이터의 total 과 load 를 사용할 수 있습니다.",
    "18": "이를 활용해서 progressbar 의 value 로 사용합니다.",
    "19": "console.log(progressEvent.lengthComputable); console.log(percentCompleted); this.setState({ loadPercent : percentCompleted }) } ... total 과 load 를 % 단위로 만들고 나머지 부분은 위와 동일하게 구현하고 LineProgress 의 value 에 해당 값을 넣어줍니다.",
    "20": "<LinearProgress variant=\"determinate\" value={this.state.loadPercent} /> 꼭 서버에서 데이터를 불러올 때 onDownloadProgress 에는 파일이 만들어지는 시간은 포함되지 않으니 클라이언트에서 임의에 이펙트를 주는 방법도 있습니다.",
    "21": "Tip!",
    "22": "responseType 이 blob 인 경우 크기가 큰 데이터를 가져오는 상황에서 사용되지만 error 가 발생할 경우 error 메세지 역시 blob 타입으로 넘어오게 됩니다.",
    "23": "해당 부분을 분기해주는 것이 좋다고 생각합니다.",
    "24": "공유하기 게시글 관리 analogcoding 저작자표시 ' Be well coding > Learn more ' 카테고리의 다른 글 styled-components 를 사용하는 8가지 이유 -번역 (0) 2020.02.14 Webpack - React with typescript 초기 설정 (1) 2020.01.21 Netlify 로 정적 클라이언트 배포하기 (0) 2020.01.09 GraphQL 을 사용하는 5가지 이유 ( 번역 ) (0) 2019.12.20 React Component , States , Props , Life cycle (0) 2019.10.08 'Be well coding/Learn more' Related Articles styled-components 를 사용하는 8가지 이유 -번역 2020.02.14 Webpack - React with typescript 초기 설정 2020.01.21 Netlify 로 정적 클라이언트 배포하기 2020.01.09 GraphQL 을 사용하는 5가지 이유 ( 번역 ) 2019.12.20 more 0 Comments 댓글쓰기 폼 이름 비밀번호 Secret 내용 Send Blog is powered by kakao / Designed by Tistory 티스토리툴바 analogcoding 구독하기"
}